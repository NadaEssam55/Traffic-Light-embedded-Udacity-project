
on_demand_traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000d20  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080007e  0080007e  00000dd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001747  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae5  00000000  00000000  0000271f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c65  00000000  00000000  00003204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a7  00000000  00000000  00004234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f7  00000000  00000000  00004adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000054d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_1>
   8:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_2>
   c:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_10>
  2c:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  8a:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MODE>:
#include "avr/interrupt.h"
#include <util/delay.h>
volatile uint8 mode =0;
static void MODE (void){
	static uint8 isr_counter=0;					 //the isr function for long press and double press
	isr_counter++;
  92:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
	Timer0_delayN(1000);
  9c:	88 ee       	ldi	r24, 0xE8	; 232
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	0e 94 24 04 	call	0x848	; 0x848 <Timer0_delayN>
	if((Dio_read(PORTD_2)==0)&& isr_counter==1){ //the is_counter must equal 1(a single press) and the button must be released after 1 sec
  a4:	8a e1       	ldi	r24, 0x1A	; 26
  a6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Dio_read>
  aa:	81 11       	cpse	r24, r1
  ac:	06 c0       	rjmp	.+12     	; 0xba <MODE+0x28>
  ae:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	11 f4       	brne	.+4      	; 0xba <MODE+0x28>
		mode =1;
  b6:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <mode>
  ba:	08 95       	ret

000000bc <app_init>:
	}
}
void app_init (void){
	Dio_init();									//initialization of DIO ,external interrupt and timer as well
  bc:	0e 94 40 01 	call	0x280	; 0x280 <Dio_init>
	EXTI_init();
  c0:	0e 94 89 03 	call	0x712	; 0x712 <EXTI_init>
	Timer0_init();
  c4:	0e 94 13 04 	call	0x826	; 0x826 <Timer0_init>
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <app_start>:
}

void app_start (void){
  cc:	cf 93       	push	r28
	 static uint8 Green_flag=1;  				//a variable for each color in the traffic light
	 static uint8 Yellow_flag=0;
	 static uint8 Red_flag=0;
	SetCallback_INT0(MODE);						//the isr function to call
  ce:	89 e4       	ldi	r24, 0x49	; 73
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 93 03 	call	0x726	; 0x726 <SetCallback_INT0>
///////////////////////////////////////
	if(Green_flag==1){							//start with the green light in the normal mode
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	11 f5       	brne	.+68     	; 0x122 <app_start+0x56>
		uint8 counter1=0;
		LED_ON(GREEN_CAR);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 30 01 	call	0x260	; 0x260 <LED_ON>
		LED_OFF(RED_CAR);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
		LED_OFF(YELLOW_CAR);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
	 static uint8 Yellow_flag=0;
	 static uint8 Red_flag=0;
	SetCallback_INT0(MODE);						//the isr function to call
///////////////////////////////////////
	if(Green_flag==1){							//start with the green light in the normal mode
		uint8 counter1=0;
  f0:	c0 e0       	ldi	r28, 0x00	; 0
		LED_ON(GREEN_CAR);
		LED_OFF(RED_CAR);
		LED_OFF(YELLOW_CAR);
		while(counter1<10){						//delay for 5 sec
  f2:	09 c0       	rjmp	.+18     	; 0x106 <app_start+0x3a>
			Timer0_delayN(500);
  f4:	84 ef       	ldi	r24, 0xF4	; 244
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 24 04 	call	0x848	; 0x848 <Timer0_delayN>
			counter1++;
  fc:	cf 5f       	subi	r28, 0xFF	; 255
			if(mode!=0)break;					//each 0.5 sec check if the button is not pressed
  fe:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <mode>
 102:	81 11       	cpse	r24, r1
 104:	02 c0       	rjmp	.+4      	; 0x10a <app_start+0x3e>
	if(Green_flag==1){							//start with the green light in the normal mode
		uint8 counter1=0;
		LED_ON(GREEN_CAR);
		LED_OFF(RED_CAR);
		LED_OFF(YELLOW_CAR);
		while(counter1<10){						//delay for 5 sec
 106:	ca 30       	cpi	r28, 0x0A	; 10
 108:	a8 f3       	brcs	.-22     	; 0xf4 <app_start+0x28>
			Timer0_delayN(500);
			counter1++;
			if(mode!=0)break;					//each 0.5 sec check if the button is not pressed
		}
		if (mode==1){							//if the button is pressed the light up the red pedestrian light
 10a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <mode>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	19 f4       	brne	.+6      	; 0x118 <app_start+0x4c>
			LED_ON(RED_PED);
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	0e 94 30 01 	call	0x260	; 0x260 <LED_ON>
		}
		Yellow_flag =1;							//rise up the yellow light flag
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <Yellow_flag.1885>
		Green_flag =0;							//get the green flag be zero
 11e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
///////////////////////////////////////
	if (Yellow_flag == 1){
 122:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Yellow_flag.1885>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	09 f0       	breq	.+2      	; 0x12c <app_start+0x60>
 12a:	49 c0       	rjmp	.+146    	; 0x1be <app_start+0xf2>
		static uint8 yellow_flag_counter =0;
		LED_OFF(GREEN_CAR);						//turn off the green light
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
		LED_OFF(RED_CAR);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
		uint8 counter2=0;
		if(mode==0){							//for normal mode toggle the car yellow light for 5 sec
 138:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <mode>
 13c:	81 11       	cpse	r24, r1
 13e:	26 c0       	rjmp	.+76     	; 0x18c <app_start+0xc0>
			LED_OFF(GREEN_PED);
 140:	8a e0       	ldi	r24, 0x0A	; 10
 142:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
			LED_OFF(RED_PED);
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
///////////////////////////////////////
	if (Yellow_flag == 1){
		static uint8 yellow_flag_counter =0;
		LED_OFF(GREEN_CAR);						//turn off the green light
		LED_OFF(RED_CAR);
		uint8 counter2=0;
 14c:	c0 e0       	ldi	r28, 0x00	; 0
		if(mode==0){							//for normal mode toggle the car yellow light for 5 sec
			LED_OFF(GREEN_PED);
			LED_OFF(RED_PED);
		while(counter2<20){						//delay for 5 sec and toggle each .25 sec
 14e:	0c c0       	rjmp	.+24     	; 0x168 <app_start+0x9c>
			Timer0_delayN(250);
 150:	8a ef       	ldi	r24, 0xFA	; 250
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 24 04 	call	0x848	; 0x848 <Timer0_delayN>
			counter2++;
 158:	cf 5f       	subi	r28, 0xFF	; 255
			LED_TOGGLE (YELLOW_CAR);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 38 01 	call	0x270	; 0x270 <LED_TOGGLE>
			if(mode !=0)break;
 160:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <mode>
 164:	81 11       	cpse	r24, r1
 166:	02 c0       	rjmp	.+4      	; 0x16c <app_start+0xa0>
		LED_OFF(RED_CAR);
		uint8 counter2=0;
		if(mode==0){							//for normal mode toggle the car yellow light for 5 sec
			LED_OFF(GREEN_PED);
			LED_OFF(RED_PED);
		while(counter2<20){						//delay for 5 sec and toggle each .25 sec
 168:	c4 31       	cpi	r28, 0x14	; 20
 16a:	90 f3       	brcs	.-28     	; 0x150 <app_start+0x84>
			Timer0_delayN(250);
			counter2++;
			LED_TOGGLE (YELLOW_CAR);
			if(mode !=0)break;
		}
		if (counter2 ==20){						//in case for normal mode check if we light up the yellow light after the red or green light to rise which flag
 16c:	c4 31       	cpi	r28, 0x14	; 20
 16e:	71 f4       	brne	.+28     	; 0x18c <app_start+0xc0>
			if(yellow_flag_counter%2 ==0){
 170:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <yellow_flag_counter.1891>
 174:	80 fd       	sbrc	r24, 0
 176:	04 c0       	rjmp	.+8      	; 0x180 <app_start+0xb4>
				Red_flag =1;
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <Red_flag.1886>
 17e:	03 c0       	rjmp	.+6      	; 0x186 <app_start+0xba>
			}
			else {
				Green_flag = 1;
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			yellow_flag_counter++;
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <yellow_flag_counter.1891>
		}
		}
		if(mode == 1){						//for pedestrian light both yellow lights for car and pedestrian
 18c:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <mode>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	99 f4       	brne	.+38     	; 0x1ba <app_start+0xee>
 194:	0c c0       	rjmp	.+24     	; 0x1ae <app_start+0xe2>
			counter2=0;
			while(counter2<20){
				Timer0_delayN(250);
 196:	8a ef       	ldi	r24, 0xFA	; 250
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 24 04 	call	0x848	; 0x848 <Timer0_delayN>
				counter2++;
 19e:	cf 5f       	subi	r28, 0xFF	; 255
				LED_TOGGLE (YELLOW_CAR);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 38 01 	call	0x270	; 0x270 <LED_TOGGLE>
				LED_TOGGLE(YELLOW_PED);
 1a6:	89 e0       	ldi	r24, 0x09	; 9
 1a8:	0e 94 38 01 	call	0x270	; 0x270 <LED_TOGGLE>
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <app_start+0xe4>
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
			yellow_flag_counter++;
		}
		}
		if(mode == 1){						//for pedestrian light both yellow lights for car and pedestrian
			counter2=0;
			while(counter2<20){
 1b0:	c4 31       	cpi	r28, 0x14	; 20
 1b2:	88 f3       	brcs	.-30     	; 0x196 <app_start+0xca>
				Timer0_delayN(250);
				counter2++;
				LED_TOGGLE (YELLOW_CAR);
				LED_TOGGLE(YELLOW_PED);
			}
			Red_flag =1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Red_flag.1886>
		}
		Yellow_flag =0;					//put the yellow flag by zero
 1ba:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <Yellow_flag.1885>
	}
/////////////////////////////////////////////
	if(Red_flag == 1){					//red flag for red light
 1be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Red_flag.1886>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <app_start+0xfc>
 1c6:	4a c0       	rjmp	.+148    	; 0x25c <app_start+0x190>
		uint8 counter3 =0;
		static uint8 Red_flag_counter=0;
		LED_OFF(YELLOW_CAR);			//turn off the yellow light
 1c8:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
		LED_OFF(YELLOW_PED);
 1cc:	89 e0       	ldi	r24, 0x09	; 9
 1ce:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
		if(mode == 1){					//for pedestrian mode
 1d2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <mode>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	59 f5       	brne	.+86     	; 0x230 <app_start+0x164>
		if(Red_flag_counter%2 == 0){	//a flag to decide what leds to turn on and off after turning off both pedestrian and car yellow leds
 1da:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Red_flag_counter.1900>
 1de:	80 fd       	sbrc	r24, 0
 1e0:	16 c0       	rjmp	.+44     	; 0x20e <app_start+0x142>
		LED_OFF(RED_PED);
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
		LED_ON(RED_CAR);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 30 01 	call	0x260	; 0x260 <LED_ON>
		LED_ON(GREEN_PED);
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	0e 94 30 01 	call	0x260	; 0x260 <LED_ON>
		}
		Yellow_flag =0;					//put the yellow flag by zero
	}
/////////////////////////////////////////////
	if(Red_flag == 1){					//red flag for red light
		uint8 counter3 =0;
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
		if(mode == 1){					//for pedestrian mode
		if(Red_flag_counter%2 == 0){	//a flag to decide what leds to turn on and off after turning off both pedestrian and car yellow leds
		LED_OFF(RED_PED);
		LED_ON(RED_CAR);
		LED_ON(GREEN_PED);
		while(counter3<20){			//delay for 5 sec
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <app_start+0x136>
			Timer0_delayN(250);
 1f8:	8a ef       	ldi	r24, 0xFA	; 250
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 24 04 	call	0x848	; 0x848 <Timer0_delayN>
			counter3++;
 200:	cf 5f       	subi	r28, 0xFF	; 255
		if(mode == 1){					//for pedestrian mode
		if(Red_flag_counter%2 == 0){	//a flag to decide what leds to turn on and off after turning off both pedestrian and car yellow leds
		LED_OFF(RED_PED);
		LED_ON(RED_CAR);
		LED_ON(GREEN_PED);
		while(counter3<20){			//delay for 5 sec
 202:	c4 31       	cpi	r28, 0x14	; 20
 204:	c8 f3       	brcs	.-14     	; 0x1f8 <app_start+0x12c>
			Timer0_delayN(250);
			counter3++;
		}
		LED_OFF(RED_CAR);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
 20c:	0b c0       	rjmp	.+22     	; 0x224 <app_start+0x158>
		}
		else{					//after the yellow leds toggle for the second time so its time to get back to the normal mode
			LED_OFF(GREEN_PED);
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	0e 94 34 01 	call	0x268	; 0x268 <LED_OFF>
			LED_ON(RED_PED);
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 30 01 	call	0x260	; 0x260 <LED_ON>
			Green_flag =1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			mode =0;
 220:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <mode>
		}
		Red_flag_counter ++;
 224:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Red_flag_counter.1900>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Red_flag_counter.1900>
 22e:	11 c0       	rjmp	.+34     	; 0x252 <app_start+0x186>
		}
		else{
			LED_ON(RED_CAR);		// in case for normal mode,turn on red car led and green pedestrian led
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 30 01 	call	0x260	; 0x260 <LED_ON>
			LED_ON(GREEN_PED);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	0e 94 30 01 	call	0x260	; 0x260 <LED_ON>
		}
		Yellow_flag =0;					//put the yellow flag by zero
	}
/////////////////////////////////////////////
	if(Red_flag == 1){					//red flag for red light
		uint8 counter3 =0;
 23c:	c0 e0       	ldi	r28, 0x00	; 0
		Red_flag_counter ++;
		}
		else{
			LED_ON(RED_CAR);		// in case for normal mode,turn on red car led and green pedestrian led
			LED_ON(GREEN_PED);
			while(counter3<20){
 23e:	07 c0       	rjmp	.+14     	; 0x24e <app_start+0x182>
				Timer0_delayN(250);
 240:	8a ef       	ldi	r24, 0xFA	; 250
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 24 04 	call	0x848	; 0x848 <Timer0_delayN>
				counter3++;
 248:	cf 5f       	subi	r28, 0xFF	; 255
				mode =0;
 24a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <mode>
		Red_flag_counter ++;
		}
		else{
			LED_ON(RED_CAR);		// in case for normal mode,turn on red car led and green pedestrian led
			LED_ON(GREEN_PED);
			while(counter3<20){
 24e:	c4 31       	cpi	r28, 0x14	; 20
 250:	b8 f3       	brcs	.-18     	; 0x240 <app_start+0x174>
				Timer0_delayN(250);
				counter3++;
				mode =0;
		}
		}
		Yellow_flag=1;		//rise the yellow flag again
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <Yellow_flag.1885>
		Red_flag=0;
 258:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <Red_flag.1886>
	}


}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LED_ON>:
 */
#include "LED.h"
#include "../../MCAL/Timer/timer0/timer0.h"
#include <util/delay.h>
void LED_ON(TRAFFIC_LIGHT led_mode){
	Dio_write(led_mode,HIGH);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Dio_write>
 266:	08 95       	ret

00000268 <LED_OFF>:
}

void LED_OFF(TRAFFIC_LIGHT led_mode){
	Dio_write(led_mode,LOW);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Dio_write>
 26e:	08 95       	ret

00000270 <LED_TOGGLE>:
}

void LED_TOGGLE (TRAFFIC_LIGHT led_mode){
		Dio_FlipChannel(led_mode);
 270:	0e 94 36 03 	call	0x66c	; 0x66c <Dio_FlipChannel>
 274:	08 95       	ret

00000276 <main>:
 * Author : Nada Essam
 */ 
#include <avr/io.h>
#include "APP/app.h"
int main(){
	app_init();
 276:	0e 94 5e 00 	call	0xbc	; 0xbc <app_init>
	while(1){
		app_start();
 27a:	0e 94 66 00 	call	0xcc	; 0xcc <app_start>
 27e:	fd cf       	rjmp	.-6      	; 0x27a <main+0x4>

00000280 <Dio_init>:
		}
		else if(port==PORT_C){
			PORTC=Level;
		}
		else if(port==PORT_D){
			PORTD=Level;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	2e c1       	rjmp	.+604    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 286:	fc 01       	movw	r30, r24
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	ef 59       	subi	r30, 0x9F	; 159
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	20 81       	ld	r18, Z
 296:	21 11       	cpse	r18, r1
 298:	47 c0       	rjmp	.+142    	; 0x328 <Dio_init+0xa8>
 29a:	fc 01       	movw	r30, r24
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	ef 59       	subi	r30, 0x9F	; 159
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	22 81       	ldd	r18, Z+2	; 0x02
 2aa:	21 30       	cpi	r18, 0x01	; 1
 2ac:	99 f4       	brne	.+38     	; 0x2d4 <Dio_init+0x54>
 2ae:	4a b3       	in	r20, 0x1a	; 26
 2b0:	fc 01       	movw	r30, r24
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	ef 59       	subi	r30, 0x9F	; 159
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	01 80       	ldd	r0, Z+1	; 0x01
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <Dio_init+0x4a>
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <Dio_init+0x46>
 2ce:	24 2b       	or	r18, r20
 2d0:	2a bb       	out	0x1a, r18	; 26
 2d2:	06 c1       	rjmp	.+524    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 2d4:	4a b3       	in	r20, 0x1a	; 26
 2d6:	fc 01       	movw	r30, r24
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	ef 59       	subi	r30, 0x9F	; 159
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	01 80       	ldd	r0, Z+1	; 0x01
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <Dio_init+0x70>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <Dio_init+0x6c>
 2f4:	20 95       	com	r18
 2f6:	24 23       	and	r18, r20
 2f8:	2a bb       	out	0x1a, r18	; 26
 2fa:	23 81       	ldd	r18, Z+3	; 0x03
 2fc:	21 30       	cpi	r18, 0x01	; 1
 2fe:	09 f0       	breq	.+2      	; 0x302 <Dio_init+0x82>
 300:	ef c0       	rjmp	.+478    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 302:	4b b3       	in	r20, 0x1b	; 27
 304:	fc 01       	movw	r30, r24
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	ef 59       	subi	r30, 0x9F	; 159
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	01 80       	ldd	r0, Z+1	; 0x01
 318:	02 c0       	rjmp	.+4      	; 0x31e <Dio_init+0x9e>
 31a:	22 0f       	add	r18, r18
 31c:	33 1f       	adc	r19, r19
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <Dio_init+0x9a>
 322:	24 2b       	or	r18, r20
 324:	2b bb       	out	0x1b, r18	; 27
 326:	dc c0       	rjmp	.+440    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 328:	21 30       	cpi	r18, 0x01	; 1
 32a:	09 f0       	breq	.+2      	; 0x32e <Dio_init+0xae>
 32c:	47 c0       	rjmp	.+142    	; 0x3bc <Dio_init+0x13c>
 32e:	fc 01       	movw	r30, r24
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	ef 59       	subi	r30, 0x9F	; 159
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	22 81       	ldd	r18, Z+2	; 0x02
 33e:	21 30       	cpi	r18, 0x01	; 1
 340:	99 f4       	brne	.+38     	; 0x368 <Dio_init+0xe8>
 342:	47 b3       	in	r20, 0x17	; 23
 344:	fc 01       	movw	r30, r24
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	ef 59       	subi	r30, 0x9F	; 159
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	01 80       	ldd	r0, Z+1	; 0x01
 358:	02 c0       	rjmp	.+4      	; 0x35e <Dio_init+0xde>
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <Dio_init+0xda>
 362:	24 2b       	or	r18, r20
 364:	27 bb       	out	0x17, r18	; 23
 366:	bc c0       	rjmp	.+376    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 368:	47 b3       	in	r20, 0x17	; 23
 36a:	fc 01       	movw	r30, r24
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	ef 59       	subi	r30, 0x9F	; 159
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	01 80       	ldd	r0, Z+1	; 0x01
 37e:	02 c0       	rjmp	.+4      	; 0x384 <Dio_init+0x104>
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <Dio_init+0x100>
 388:	20 95       	com	r18
 38a:	24 23       	and	r18, r20
 38c:	27 bb       	out	0x17, r18	; 23
 38e:	23 81       	ldd	r18, Z+3	; 0x03
 390:	21 30       	cpi	r18, 0x01	; 1
 392:	09 f0       	breq	.+2      	; 0x396 <Dio_init+0x116>
 394:	a5 c0       	rjmp	.+330    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 396:	48 b3       	in	r20, 0x18	; 24
 398:	fc 01       	movw	r30, r24
 39a:	ee 0f       	add	r30, r30
 39c:	ff 1f       	adc	r31, r31
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ef 59       	subi	r30, 0x9F	; 159
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	01 80       	ldd	r0, Z+1	; 0x01
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <Dio_init+0x132>
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <Dio_init+0x12e>
 3b6:	24 2b       	or	r18, r20
 3b8:	28 bb       	out	0x18, r18	; 24
 3ba:	92 c0       	rjmp	.+292    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 3bc:	22 30       	cpi	r18, 0x02	; 2
 3be:	09 f0       	breq	.+2      	; 0x3c2 <Dio_init+0x142>
 3c0:	47 c0       	rjmp	.+142    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3c2:	fc 01       	movw	r30, r24
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	ef 59       	subi	r30, 0x9F	; 159
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	22 81       	ldd	r18, Z+2	; 0x02
 3d2:	21 30       	cpi	r18, 0x01	; 1
 3d4:	99 f4       	brne	.+38     	; 0x3fc <Dio_init+0x17c>
 3d6:	44 b3       	in	r20, 0x14	; 20
 3d8:	fc 01       	movw	r30, r24
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ef 59       	subi	r30, 0x9F	; 159
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	01 80       	ldd	r0, Z+1	; 0x01
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <Dio_init+0x172>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <Dio_init+0x16e>
 3f6:	24 2b       	or	r18, r20
 3f8:	24 bb       	out	0x14, r18	; 20
 3fa:	72 c0       	rjmp	.+228    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 3fc:	44 b3       	in	r20, 0x14	; 20
 3fe:	fc 01       	movw	r30, r24
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	ef 59       	subi	r30, 0x9F	; 159
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	01 80       	ldd	r0, Z+1	; 0x01
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	20 95       	com	r18
 41e:	24 23       	and	r18, r20
 420:	24 bb       	out	0x14, r18	; 20
 422:	23 81       	ldd	r18, Z+3	; 0x03
 424:	21 30       	cpi	r18, 0x01	; 1
 426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	5b c0       	rjmp	.+182    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 42a:	45 b3       	in	r20, 0x15	; 21
 42c:	fc 01       	movw	r30, r24
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	ef 59       	subi	r30, 0x9F	; 159
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	01 80       	ldd	r0, Z+1	; 0x01
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	24 2b       	or	r18, r20
 44c:	25 bb       	out	0x15, r18	; 21
 44e:	48 c0       	rjmp	.+144    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 450:	23 30       	cpi	r18, 0x03	; 3
 452:	09 f0       	breq	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 454:	45 c0       	rjmp	.+138    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 456:	fc 01       	movw	r30, r24
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	ef 59       	subi	r30, 0x9F	; 159
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	22 81       	ldd	r18, Z+2	; 0x02
 466:	21 30       	cpi	r18, 0x01	; 1
 468:	99 f4       	brne	.+38     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 46a:	41 b3       	in	r20, 0x11	; 17
 46c:	fc 01       	movw	r30, r24
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	ef 59       	subi	r30, 0x9F	; 159
 478:	ff 4f       	sbci	r31, 0xFF	; 255
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	01 80       	ldd	r0, Z+1	; 0x01
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	24 2b       	or	r18, r20
 48c:	21 bb       	out	0x11, r18	; 17
 48e:	28 c0       	rjmp	.+80     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 490:	41 b3       	in	r20, 0x11	; 17
 492:	fc 01       	movw	r30, r24
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	ee 0f       	add	r30, r30
 49a:	ff 1f       	adc	r31, r31
 49c:	ef 59       	subi	r30, 0x9F	; 159
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	01 80       	ldd	r0, Z+1	; 0x01
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	0a 94       	dec	r0
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4b0:	20 95       	com	r18
 4b2:	24 23       	and	r18, r20
 4b4:	21 bb       	out	0x11, r18	; 17
 4b6:	23 81       	ldd	r18, Z+3	; 0x03
 4b8:	21 30       	cpi	r18, 0x01	; 1
 4ba:	91 f4       	brne	.+36     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4bc:	42 b3       	in	r20, 0x12	; 18
 4be:	fc 01       	movw	r30, r24
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	ef 59       	subi	r30, 0x9F	; 159
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	01 80       	ldd	r0, Z+1	; 0x01
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d4:	22 0f       	add	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4dc:	24 2b       	or	r18, r20
 4de:	22 bb       	out	0x12, r18	; 18
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	ac 01       	movw	r20, r24
 4e4:	09 2e       	mov	r0, r25
 4e6:	00 0c       	add	r0, r0
 4e8:	66 0b       	sbc	r22, r22
 4ea:	77 0b       	sbc	r23, r23
 4ec:	47 30       	cpi	r20, 0x07	; 7
 4ee:	51 05       	cpc	r21, r1
 4f0:	61 05       	cpc	r22, r1
 4f2:	71 05       	cpc	r23, r1
 4f4:	08 f4       	brcc	.+2      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f6:	c7 ce       	rjmp	.-626    	; 0x286 <Dio_init+0x6>
 4f8:	08 95       	ret

000004fa <Dio_write>:
 4fa:	98 2f       	mov	r25, r24
 4fc:	96 95       	lsr	r25
 4fe:	96 95       	lsr	r25
 500:	96 95       	lsr	r25
 502:	87 70       	andi	r24, 0x07	; 7
 504:	91 11       	cpse	r25, r1
 506:	1d c0       	rjmp	.+58     	; 0x542 <Dio_write+0x48>
 508:	61 30       	cpi	r22, 0x01	; 1
 50a:	69 f4       	brne	.+26     	; 0x526 <Dio_write+0x2c>
 50c:	4b b3       	in	r20, 0x1b	; 27
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	b9 01       	movw	r22, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <Dio_write+0x20>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <Dio_write+0x1c>
 51e:	cb 01       	movw	r24, r22
 520:	84 2b       	or	r24, r20
 522:	8b bb       	out	0x1b, r24	; 27
 524:	08 95       	ret
 526:	4b b3       	in	r20, 0x1b	; 27
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	b9 01       	movw	r22, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <Dio_write+0x3a>
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	8a 95       	dec	r24
 536:	e2 f7       	brpl	.-8      	; 0x530 <Dio_write+0x36>
 538:	cb 01       	movw	r24, r22
 53a:	80 95       	com	r24
 53c:	84 23       	and	r24, r20
 53e:	8b bb       	out	0x1b, r24	; 27
 540:	08 95       	ret
 542:	91 30       	cpi	r25, 0x01	; 1
 544:	e9 f4       	brne	.+58     	; 0x580 <Dio_write+0x86>
 546:	61 30       	cpi	r22, 0x01	; 1
 548:	69 f4       	brne	.+26     	; 0x564 <Dio_write+0x6a>
 54a:	48 b3       	in	r20, 0x18	; 24
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	b9 01       	movw	r22, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <Dio_write+0x5e>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	8a 95       	dec	r24
 55a:	e2 f7       	brpl	.-8      	; 0x554 <Dio_write+0x5a>
 55c:	cb 01       	movw	r24, r22
 55e:	84 2b       	or	r24, r20
 560:	88 bb       	out	0x18, r24	; 24
 562:	08 95       	ret
 564:	48 b3       	in	r20, 0x18	; 24
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	b9 01       	movw	r22, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <Dio_write+0x78>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	8a 95       	dec	r24
 574:	e2 f7       	brpl	.-8      	; 0x56e <Dio_write+0x74>
 576:	cb 01       	movw	r24, r22
 578:	80 95       	com	r24
 57a:	84 23       	and	r24, r20
 57c:	88 bb       	out	0x18, r24	; 24
 57e:	08 95       	ret
 580:	92 30       	cpi	r25, 0x02	; 2
 582:	e9 f4       	brne	.+58     	; 0x5be <Dio_write+0xc4>
 584:	61 30       	cpi	r22, 0x01	; 1
 586:	69 f4       	brne	.+26     	; 0x5a2 <Dio_write+0xa8>
 588:	45 b3       	in	r20, 0x15	; 21
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <Dio_write+0x9c>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <Dio_write+0x98>
 59a:	cb 01       	movw	r24, r22
 59c:	84 2b       	or	r24, r20
 59e:	85 bb       	out	0x15, r24	; 21
 5a0:	08 95       	ret
 5a2:	45 b3       	in	r20, 0x15	; 21
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	b9 01       	movw	r22, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <Dio_write+0xb6>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	8a 95       	dec	r24
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <Dio_write+0xb2>
 5b4:	cb 01       	movw	r24, r22
 5b6:	80 95       	com	r24
 5b8:	84 23       	and	r24, r20
 5ba:	85 bb       	out	0x15, r24	; 21
 5bc:	08 95       	ret
 5be:	93 30       	cpi	r25, 0x03	; 3
 5c0:	e1 f4       	brne	.+56     	; 0x5fa <Dio_write+0x100>
 5c2:	61 30       	cpi	r22, 0x01	; 1
 5c4:	69 f4       	brne	.+26     	; 0x5e0 <Dio_write+0xe6>
 5c6:	42 b3       	in	r20, 0x12	; 18
 5c8:	21 e0       	ldi	r18, 0x01	; 1
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	b9 01       	movw	r22, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <Dio_write+0xda>
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	8a 95       	dec	r24
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <Dio_write+0xd6>
 5d8:	cb 01       	movw	r24, r22
 5da:	84 2b       	or	r24, r20
 5dc:	82 bb       	out	0x12, r24	; 18
 5de:	08 95       	ret
 5e0:	42 b3       	in	r20, 0x12	; 18
 5e2:	21 e0       	ldi	r18, 0x01	; 1
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	b9 01       	movw	r22, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <Dio_write+0xf4>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <Dio_write+0xf0>
 5f2:	cb 01       	movw	r24, r22
 5f4:	80 95       	com	r24
 5f6:	84 23       	and	r24, r20
 5f8:	82 bb       	out	0x12, r24	; 18
 5fa:	08 95       	ret

000005fc <Dio_read>:
 5fc:	98 2f       	mov	r25, r24
 5fe:	96 95       	lsr	r25
 600:	96 95       	lsr	r25
 602:	96 95       	lsr	r25
 604:	48 2f       	mov	r20, r24
 606:	47 70       	andi	r20, 0x07	; 7
 608:	91 11       	cpse	r25, r1
 60a:	0a c0       	rjmp	.+20     	; 0x620 <Dio_read+0x24>
 60c:	99 b3       	in	r25, 0x19	; 25
 60e:	89 2f       	mov	r24, r25
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <Dio_read+0x1c>
 614:	95 95       	asr	r25
 616:	87 95       	ror	r24
 618:	4a 95       	dec	r20
 61a:	e2 f7       	brpl	.-8      	; 0x614 <Dio_read+0x18>
 61c:	81 70       	andi	r24, 0x01	; 1
 61e:	08 95       	ret
 620:	91 30       	cpi	r25, 0x01	; 1
 622:	51 f4       	brne	.+20     	; 0x638 <Dio_read+0x3c>
 624:	26 b3       	in	r18, 0x16	; 22
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	c9 01       	movw	r24, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <Dio_read+0x34>
 62c:	95 95       	asr	r25
 62e:	87 95       	ror	r24
 630:	4a 95       	dec	r20
 632:	e2 f7       	brpl	.-8      	; 0x62c <Dio_read+0x30>
 634:	81 70       	andi	r24, 0x01	; 1
 636:	08 95       	ret
 638:	92 30       	cpi	r25, 0x02	; 2
 63a:	51 f4       	brne	.+20     	; 0x650 <Dio_read+0x54>
 63c:	23 b3       	in	r18, 0x13	; 19
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	c9 01       	movw	r24, r18
 642:	02 c0       	rjmp	.+4      	; 0x648 <Dio_read+0x4c>
 644:	95 95       	asr	r25
 646:	87 95       	ror	r24
 648:	4a 95       	dec	r20
 64a:	e2 f7       	brpl	.-8      	; 0x644 <Dio_read+0x48>
 64c:	81 70       	andi	r24, 0x01	; 1
 64e:	08 95       	ret
 650:	93 30       	cpi	r25, 0x03	; 3
 652:	51 f4       	brne	.+20     	; 0x668 <Dio_read+0x6c>
 654:	20 b3       	in	r18, 0x10	; 16
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	c9 01       	movw	r24, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <Dio_read+0x64>
 65c:	95 95       	asr	r25
 65e:	87 95       	ror	r24
 660:	4a 95       	dec	r20
 662:	e2 f7       	brpl	.-8      	; 0x65c <Dio_read+0x60>
 664:	81 70       	andi	r24, 0x01	; 1
 666:	08 95       	ret
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret

0000066c <Dio_FlipChannel>:
		}
}
//////////////////////////////////////////////////////////////
void Dio_FlipChannel(channel_type channel){
	Dio_port_type port = channel/8;
 66c:	98 2f       	mov	r25, r24
 66e:	96 95       	lsr	r25
 670:	96 95       	lsr	r25
 672:	96 95       	lsr	r25
		Dio_pin_type pin = channel%8;
 674:	87 70       	andi	r24, 0x07	; 7
		if(port==PORT_A){
 676:	91 11       	cpse	r25, r1
 678:	0d c0       	rjmp	.+26     	; 0x694 <Dio_FlipChannel+0x28>
			Toggle_Bit(PORTA, pin);
 67a:	4b b3       	in	r20, 0x1b	; 27
 67c:	21 e0       	ldi	r18, 0x01	; 1
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	b9 01       	movw	r22, r18
 682:	02 c0       	rjmp	.+4      	; 0x688 <Dio_FlipChannel+0x1c>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	8a 95       	dec	r24
 68a:	e2 f7       	brpl	.-8      	; 0x684 <Dio_FlipChannel+0x18>
 68c:	cb 01       	movw	r24, r22
 68e:	84 27       	eor	r24, r20
 690:	8b bb       	out	0x1b, r24	; 27
 692:	08 95       	ret
		}
		else if(port==PORT_B){
 694:	91 30       	cpi	r25, 0x01	; 1
 696:	69 f4       	brne	.+26     	; 0x6b2 <Dio_FlipChannel+0x46>
			Toggle_Bit(PORTB, pin);
 698:	48 b3       	in	r20, 0x18	; 24
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	b9 01       	movw	r22, r18
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <Dio_FlipChannel+0x3a>
 6a2:	66 0f       	add	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	8a 95       	dec	r24
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <Dio_FlipChannel+0x36>
 6aa:	cb 01       	movw	r24, r22
 6ac:	84 27       	eor	r24, r20
 6ae:	88 bb       	out	0x18, r24	; 24
 6b0:	08 95       	ret

		}
		else if(port==PORT_C){
 6b2:	92 30       	cpi	r25, 0x02	; 2
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <Dio_FlipChannel+0x64>
			Toggle_Bit(PORTC, pin);
 6b6:	45 b3       	in	r20, 0x15	; 21
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	b9 01       	movw	r22, r18
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <Dio_FlipChannel+0x58>
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	8a 95       	dec	r24
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <Dio_FlipChannel+0x54>
 6c8:	cb 01       	movw	r24, r22
 6ca:	84 27       	eor	r24, r20
 6cc:	85 bb       	out	0x15, r24	; 21
 6ce:	08 95       	ret
		}
		else if(port==PORT_D){
 6d0:	93 30       	cpi	r25, 0x03	; 3
 6d2:	61 f4       	brne	.+24     	; 0x6ec <Dio_FlipChannel+0x80>
			Toggle_Bit(PORTD, pin);
 6d4:	42 b3       	in	r20, 0x12	; 18
 6d6:	21 e0       	ldi	r18, 0x01	; 1
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	b9 01       	movw	r22, r18
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <Dio_FlipChannel+0x76>
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	8a 95       	dec	r24
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <Dio_FlipChannel+0x72>
 6e6:	cb 01       	movw	r24, r22
 6e8:	84 27       	eor	r24, r20
 6ea:	82 bb       	out	0x12, r24	; 18
 6ec:	08 95       	ret

000006ee <EXTI_enable>:
}
void SetCallback_INT1(void(*p2f)(void)){    //then we call this function and pass to it the function
	p2f_INT1=p2f;							//we want to implement ex:(toggle led) it in the isr,
}											// so we are saving the address of toggle led to p2f_INTx
void SetCallback_INT2(void(*p2f)(void)){	//which which will get called in the isr
	p2f_INT2=p2f;
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	41 f0       	breq	.+16     	; 0x702 <EXTI_enable+0x14>
 6f2:	18 f0       	brcs	.+6      	; 0x6fa <EXTI_enable+0xc>
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	49 f0       	breq	.+18     	; 0x70a <EXTI_enable+0x1c>
 6f8:	08 95       	ret
 6fa:	8b b7       	in	r24, 0x3b	; 59
 6fc:	80 64       	ori	r24, 0x40	; 64
 6fe:	8b bf       	out	0x3b, r24	; 59
 700:	08 95       	ret
 702:	8b b7       	in	r24, 0x3b	; 59
 704:	80 68       	ori	r24, 0x80	; 128
 706:	8b bf       	out	0x3b, r24	; 59
 708:	08 95       	ret
 70a:	8b b7       	in	r24, 0x3b	; 59
 70c:	80 62       	ori	r24, 0x20	; 32
 70e:	8b bf       	out	0x3b, r24	; 59
 710:	08 95       	ret

00000712 <EXTI_init>:
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	0e 94 77 03 	call	0x6ee	; 0x6ee <EXTI_enable>
 718:	85 b7       	in	r24, 0x35	; 53
 71a:	81 60       	ori	r24, 0x01	; 1
 71c:	85 bf       	out	0x35, r24	; 53
 71e:	85 b7       	in	r24, 0x35	; 53
 720:	82 60       	ori	r24, 0x02	; 2
 722:	85 bf       	out	0x35, r24	; 53
 724:	08 95       	ret

00000726 <SetCallback_INT0>:
 726:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <p2f_INT0+0x1>
 72a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <p2f_INT0>
 72e:	08 95       	ret

00000730 <__vector_1>:
}

ISR(INT0_vect){
 730:	1f 92       	push	r1
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	0f 92       	push	r0
 738:	11 24       	eor	r1, r1
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	4f 93       	push	r20
 740:	5f 93       	push	r21
 742:	6f 93       	push	r22
 744:	7f 93       	push	r23
 746:	8f 93       	push	r24
 748:	9f 93       	push	r25
 74a:	af 93       	push	r26
 74c:	bf 93       	push	r27
 74e:	ef 93       	push	r30
 750:	ff 93       	push	r31
	if(p2f_INT0 !=0){
 752:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <p2f_INT0>
 756:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <p2f_INT0+0x1>
 75a:	30 97       	sbiw	r30, 0x00	; 0
 75c:	09 f0       	breq	.+2      	; 0x760 <__vector_1+0x30>
		p2f_INT0();
 75e:	09 95       	icall
	}
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_2>:
ISR(INT1_vect){
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31
	if(p2f_INT1 !=0){
 7a4:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <p2f_INT1>
 7a8:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <p2f_INT1+0x1>
 7ac:	30 97       	sbiw	r30, 0x00	; 0
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <__vector_2+0x30>
		p2f_INT1();
 7b0:	09 95       	icall
	}
}
 7b2:	ff 91       	pop	r31
 7b4:	ef 91       	pop	r30
 7b6:	bf 91       	pop	r27
 7b8:	af 91       	pop	r26
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	7f 91       	pop	r23
 7c0:	6f 91       	pop	r22
 7c2:	5f 91       	pop	r21
 7c4:	4f 91       	pop	r20
 7c6:	3f 91       	pop	r19
 7c8:	2f 91       	pop	r18
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <__vector_3>:
ISR(INT2_vect){
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	2f 93       	push	r18
 7e0:	3f 93       	push	r19
 7e2:	4f 93       	push	r20
 7e4:	5f 93       	push	r21
 7e6:	6f 93       	push	r22
 7e8:	7f 93       	push	r23
 7ea:	8f 93       	push	r24
 7ec:	9f 93       	push	r25
 7ee:	af 93       	push	r26
 7f0:	bf 93       	push	r27
 7f2:	ef 93       	push	r30
 7f4:	ff 93       	push	r31
	if(p2f_INT2 !=0){
 7f6:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <p2f_INT2>
 7fa:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <p2f_INT2+0x1>
 7fe:	30 97       	sbiw	r30, 0x00	; 0
 800:	09 f0       	breq	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		p2f_INT2();
 802:	09 95       	icall
	}
}
 804:	ff 91       	pop	r31
 806:	ef 91       	pop	r30
 808:	bf 91       	pop	r27
 80a:	af 91       	pop	r26
 80c:	9f 91       	pop	r25
 80e:	8f 91       	pop	r24
 810:	7f 91       	pop	r23
 812:	6f 91       	pop	r22
 814:	5f 91       	pop	r21
 816:	4f 91       	pop	r20
 818:	3f 91       	pop	r19
 81a:	2f 91       	pop	r18
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	1f 90       	pop	r1
 824:	18 95       	reti

00000826 <Timer0_init>:
void SetCallBack_Timer0_OV(void(*p2f)(void)){
	Timer0_p2f_OV =p2f;

}
void SetCallBack_Timer0_CTC(void(*p2f)(void)){
	Timer0_p2f_CTC=p2f;
 826:	83 b7       	in	r24, 0x33	; 51
 828:	81 60       	ori	r24, 0x01	; 1
 82a:	83 bf       	out	0x33, r24	; 51
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	8d 7f       	andi	r24, 0xFD	; 253
 830:	83 bf       	out	0x33, r24	; 51
 832:	83 b7       	in	r24, 0x33	; 51
 834:	84 60       	ori	r24, 0x04	; 4
 836:	83 bf       	out	0x33, r24	; 51
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	8f 7b       	andi	r24, 0xBF	; 191
 83c:	83 bf       	out	0x33, r24	; 51
 83e:	83 b7       	in	r24, 0x33	; 51
 840:	87 7f       	andi	r24, 0xF7	; 247
 842:	83 bf       	out	0x33, r24	; 51
 844:	12 be       	out	0x32, r1	; 50
 846:	08 95       	ret

00000848 <Timer0_delayN>:
 848:	bc 01       	movw	r22, r24
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__floatunsisf>
 852:	2f e6       	ldi	r18, 0x6F	; 111
 854:	32 e1       	ldi	r19, 0x12	; 18
 856:	43 e8       	ldi	r20, 0x83	; 131
 858:	5a e3       	ldi	r21, 0x3A	; 58
 85a:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3>
 85e:	2d eb       	ldi	r18, 0xBD	; 189
 860:	37 e3       	ldi	r19, 0x37	; 55
 862:	46 e0       	ldi	r20, 0x06	; 6
 864:	5d e3       	ldi	r21, 0x3D	; 61
 866:	0e 94 b1 04 	call	0x962	; 0x962 <__divsf3>
 86a:	0e 94 9a 04 	call	0x934	; 0x934 <ceil>
 86e:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 872:	20 e0       	ldi	r18, 0x00	; 0
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	08 c0       	rjmp	.+16     	; 0x888 <__stack+0x29>
 878:	08 b6       	in	r0, 0x38	; 56
 87a:	00 fe       	sbrs	r0, 0
 87c:	fd cf       	rjmp	.-6      	; 0x878 <__stack+0x19>
 87e:	88 b7       	in	r24, 0x38	; 56
 880:	81 60       	ori	r24, 0x01	; 1
 882:	88 bf       	out	0x38, r24	; 56
 884:	2f 5f       	subi	r18, 0xFF	; 255
 886:	3f 4f       	sbci	r19, 0xFF	; 255
 888:	26 17       	cp	r18, r22
 88a:	37 07       	cpc	r19, r23
 88c:	a8 f3       	brcs	.-22     	; 0x878 <__stack+0x19>
 88e:	08 95       	ret

00000890 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	2f 93       	push	r18
 89c:	3f 93       	push	r19
 89e:	4f 93       	push	r20
 8a0:	5f 93       	push	r21
 8a2:	6f 93       	push	r22
 8a4:	7f 93       	push	r23
 8a6:	8f 93       	push	r24
 8a8:	9f 93       	push	r25
 8aa:	af 93       	push	r26
 8ac:	bf 93       	push	r27
 8ae:	ef 93       	push	r30
 8b0:	ff 93       	push	r31
	if (Timer0_p2f_OV !=0){
 8b2:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Timer0_p2f_OV>
 8b6:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Timer0_p2f_OV+0x1>
 8ba:	30 97       	sbiw	r30, 0x00	; 0
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__vector_11+0x30>
		Timer0_p2f_OV();
 8be:	09 95       	icall
	}
}
 8c0:	ff 91       	pop	r31
 8c2:	ef 91       	pop	r30
 8c4:	bf 91       	pop	r27
 8c6:	af 91       	pop	r26
 8c8:	9f 91       	pop	r25
 8ca:	8f 91       	pop	r24
 8cc:	7f 91       	pop	r23
 8ce:	6f 91       	pop	r22
 8d0:	5f 91       	pop	r21
 8d2:	4f 91       	pop	r20
 8d4:	3f 91       	pop	r19
 8d6:	2f 91       	pop	r18
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <__vector_10>:
ISR(TIMER0_COMP_vect){
 8e2:	1f 92       	push	r1
 8e4:	0f 92       	push	r0
 8e6:	0f b6       	in	r0, 0x3f	; 63
 8e8:	0f 92       	push	r0
 8ea:	11 24       	eor	r1, r1
 8ec:	2f 93       	push	r18
 8ee:	3f 93       	push	r19
 8f0:	4f 93       	push	r20
 8f2:	5f 93       	push	r21
 8f4:	6f 93       	push	r22
 8f6:	7f 93       	push	r23
 8f8:	8f 93       	push	r24
 8fa:	9f 93       	push	r25
 8fc:	af 93       	push	r26
 8fe:	bf 93       	push	r27
 900:	ef 93       	push	r30
 902:	ff 93       	push	r31
	if (Timer0_p2f_CTC !=0){
 904:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Timer0_p2f_CTC>
 908:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <Timer0_p2f_CTC+0x1>
 90c:	30 97       	sbiw	r30, 0x00	; 0
 90e:	09 f0       	breq	.+2      	; 0x912 <__vector_10+0x30>
		Timer0_p2f_CTC();
 910:	09 95       	icall
	}
}
 912:	ff 91       	pop	r31
 914:	ef 91       	pop	r30
 916:	bf 91       	pop	r27
 918:	af 91       	pop	r26
 91a:	9f 91       	pop	r25
 91c:	8f 91       	pop	r24
 91e:	7f 91       	pop	r23
 920:	6f 91       	pop	r22
 922:	5f 91       	pop	r21
 924:	4f 91       	pop	r20
 926:	3f 91       	pop	r19
 928:	2f 91       	pop	r18
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <ceil>:
 934:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_trunc>
 938:	90 f0       	brcs	.+36     	; 0x95e <ceil+0x2a>
 93a:	9f 37       	cpi	r25, 0x7F	; 127
 93c:	48 f4       	brcc	.+18     	; 0x950 <ceil+0x1c>
 93e:	91 11       	cpse	r25, r1
 940:	16 f4       	brtc	.+4      	; 0x946 <ceil+0x12>
 942:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_szero>
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	80 e8       	ldi	r24, 0x80	; 128
 94c:	9f e3       	ldi	r25, 0x3F	; 63
 94e:	08 95       	ret
 950:	26 f0       	brts	.+8      	; 0x95a <ceil+0x26>
 952:	1b 16       	cp	r1, r27
 954:	61 1d       	adc	r22, r1
 956:	71 1d       	adc	r23, r1
 958:	81 1d       	adc	r24, r1
 95a:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__fp_mintl>
 95e:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_mpack>

00000962 <__divsf3>:
 962:	0e 94 c5 04 	call	0x98a	; 0x98a <__divsf3x>
 966:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_round>
 96a:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscB>
 96e:	58 f0       	brcs	.+22     	; 0x986 <__divsf3+0x24>
 970:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscA>
 974:	40 f0       	brcs	.+16     	; 0x986 <__divsf3+0x24>
 976:	29 f4       	brne	.+10     	; 0x982 <__divsf3+0x20>
 978:	5f 3f       	cpi	r21, 0xFF	; 255
 97a:	29 f0       	breq	.+10     	; 0x986 <__divsf3+0x24>
 97c:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_inf>
 980:	51 11       	cpse	r21, r1
 982:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_szero>
 986:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_nan>

0000098a <__divsf3x>:
 98a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_split3>
 98e:	68 f3       	brcs	.-38     	; 0x96a <__divsf3+0x8>

00000990 <__divsf3_pse>:
 990:	99 23       	and	r25, r25
 992:	b1 f3       	breq	.-20     	; 0x980 <__divsf3+0x1e>
 994:	55 23       	and	r21, r21
 996:	91 f3       	breq	.-28     	; 0x97c <__divsf3+0x1a>
 998:	95 1b       	sub	r25, r21
 99a:	55 0b       	sbc	r21, r21
 99c:	bb 27       	eor	r27, r27
 99e:	aa 27       	eor	r26, r26
 9a0:	62 17       	cp	r22, r18
 9a2:	73 07       	cpc	r23, r19
 9a4:	84 07       	cpc	r24, r20
 9a6:	38 f0       	brcs	.+14     	; 0x9b6 <__divsf3_pse+0x26>
 9a8:	9f 5f       	subi	r25, 0xFF	; 255
 9aa:	5f 4f       	sbci	r21, 0xFF	; 255
 9ac:	22 0f       	add	r18, r18
 9ae:	33 1f       	adc	r19, r19
 9b0:	44 1f       	adc	r20, r20
 9b2:	aa 1f       	adc	r26, r26
 9b4:	a9 f3       	breq	.-22     	; 0x9a0 <__divsf3_pse+0x10>
 9b6:	35 d0       	rcall	.+106    	; 0xa22 <__divsf3_pse+0x92>
 9b8:	0e 2e       	mov	r0, r30
 9ba:	3a f0       	brmi	.+14     	; 0x9ca <__divsf3_pse+0x3a>
 9bc:	e0 e8       	ldi	r30, 0x80	; 128
 9be:	32 d0       	rcall	.+100    	; 0xa24 <__divsf3_pse+0x94>
 9c0:	91 50       	subi	r25, 0x01	; 1
 9c2:	50 40       	sbci	r21, 0x00	; 0
 9c4:	e6 95       	lsr	r30
 9c6:	00 1c       	adc	r0, r0
 9c8:	ca f7       	brpl	.-14     	; 0x9bc <__divsf3_pse+0x2c>
 9ca:	2b d0       	rcall	.+86     	; 0xa22 <__divsf3_pse+0x92>
 9cc:	fe 2f       	mov	r31, r30
 9ce:	29 d0       	rcall	.+82     	; 0xa22 <__divsf3_pse+0x92>
 9d0:	66 0f       	add	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	bb 1f       	adc	r27, r27
 9d8:	26 17       	cp	r18, r22
 9da:	37 07       	cpc	r19, r23
 9dc:	48 07       	cpc	r20, r24
 9de:	ab 07       	cpc	r26, r27
 9e0:	b0 e8       	ldi	r27, 0x80	; 128
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <__divsf3_pse+0x56>
 9e4:	bb 0b       	sbc	r27, r27
 9e6:	80 2d       	mov	r24, r0
 9e8:	bf 01       	movw	r22, r30
 9ea:	ff 27       	eor	r31, r31
 9ec:	93 58       	subi	r25, 0x83	; 131
 9ee:	5f 4f       	sbci	r21, 0xFF	; 255
 9f0:	3a f0       	brmi	.+14     	; 0xa00 <__divsf3_pse+0x70>
 9f2:	9e 3f       	cpi	r25, 0xFE	; 254
 9f4:	51 05       	cpc	r21, r1
 9f6:	78 f0       	brcs	.+30     	; 0xa16 <__divsf3_pse+0x86>
 9f8:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_inf>
 9fc:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_szero>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	e4 f3       	brlt	.-8      	; 0x9fc <__divsf3_pse+0x6c>
 a04:	98 3e       	cpi	r25, 0xE8	; 232
 a06:	d4 f3       	brlt	.-12     	; 0x9fc <__divsf3_pse+0x6c>
 a08:	86 95       	lsr	r24
 a0a:	77 95       	ror	r23
 a0c:	67 95       	ror	r22
 a0e:	b7 95       	ror	r27
 a10:	f7 95       	ror	r31
 a12:	9f 5f       	subi	r25, 0xFF	; 255
 a14:	c9 f7       	brne	.-14     	; 0xa08 <__divsf3_pse+0x78>
 a16:	88 0f       	add	r24, r24
 a18:	91 1d       	adc	r25, r1
 a1a:	96 95       	lsr	r25
 a1c:	87 95       	ror	r24
 a1e:	97 f9       	bld	r25, 7
 a20:	08 95       	ret
 a22:	e1 e0       	ldi	r30, 0x01	; 1
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	88 1f       	adc	r24, r24
 a2a:	bb 1f       	adc	r27, r27
 a2c:	62 17       	cp	r22, r18
 a2e:	73 07       	cpc	r23, r19
 a30:	84 07       	cpc	r24, r20
 a32:	ba 07       	cpc	r27, r26
 a34:	20 f0       	brcs	.+8      	; 0xa3e <__divsf3_pse+0xae>
 a36:	62 1b       	sub	r22, r18
 a38:	73 0b       	sbc	r23, r19
 a3a:	84 0b       	sbc	r24, r20
 a3c:	ba 0b       	sbc	r27, r26
 a3e:	ee 1f       	adc	r30, r30
 a40:	88 f7       	brcc	.-30     	; 0xa24 <__divsf3_pse+0x94>
 a42:	e0 95       	com	r30
 a44:	08 95       	ret

00000a46 <__fixunssfsi>:
 a46:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_splitA>
 a4a:	88 f0       	brcs	.+34     	; 0xa6e <__fixunssfsi+0x28>
 a4c:	9f 57       	subi	r25, 0x7F	; 127
 a4e:	98 f0       	brcs	.+38     	; 0xa76 <__fixunssfsi+0x30>
 a50:	b9 2f       	mov	r27, r25
 a52:	99 27       	eor	r25, r25
 a54:	b7 51       	subi	r27, 0x17	; 23
 a56:	b0 f0       	brcs	.+44     	; 0xa84 <__fixunssfsi+0x3e>
 a58:	e1 f0       	breq	.+56     	; 0xa92 <__fixunssfsi+0x4c>
 a5a:	66 0f       	add	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	1a f0       	brmi	.+6      	; 0xa6a <__fixunssfsi+0x24>
 a64:	ba 95       	dec	r27
 a66:	c9 f7       	brne	.-14     	; 0xa5a <__fixunssfsi+0x14>
 a68:	14 c0       	rjmp	.+40     	; 0xa92 <__fixunssfsi+0x4c>
 a6a:	b1 30       	cpi	r27, 0x01	; 1
 a6c:	91 f0       	breq	.+36     	; 0xa92 <__fixunssfsi+0x4c>
 a6e:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_zero>
 a72:	b1 e0       	ldi	r27, 0x01	; 1
 a74:	08 95       	ret
 a76:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_zero>
 a7a:	67 2f       	mov	r22, r23
 a7c:	78 2f       	mov	r23, r24
 a7e:	88 27       	eor	r24, r24
 a80:	b8 5f       	subi	r27, 0xF8	; 248
 a82:	39 f0       	breq	.+14     	; 0xa92 <__fixunssfsi+0x4c>
 a84:	b9 3f       	cpi	r27, 0xF9	; 249
 a86:	cc f3       	brlt	.-14     	; 0xa7a <__fixunssfsi+0x34>
 a88:	86 95       	lsr	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b3 95       	inc	r27
 a90:	d9 f7       	brne	.-10     	; 0xa88 <__fixunssfsi+0x42>
 a92:	3e f4       	brtc	.+14     	; 0xaa2 <__fixunssfsi+0x5c>
 a94:	90 95       	com	r25
 a96:	80 95       	com	r24
 a98:	70 95       	com	r23
 a9a:	61 95       	neg	r22
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	08 95       	ret

00000aa4 <__floatunsisf>:
 aa4:	e8 94       	clt
 aa6:	09 c0       	rjmp	.+18     	; 0xaba <__floatsisf+0x12>

00000aa8 <__floatsisf>:
 aa8:	97 fb       	bst	r25, 7
 aaa:	3e f4       	brtc	.+14     	; 0xaba <__floatsisf+0x12>
 aac:	90 95       	com	r25
 aae:	80 95       	com	r24
 ab0:	70 95       	com	r23
 ab2:	61 95       	neg	r22
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	8f 4f       	sbci	r24, 0xFF	; 255
 ab8:	9f 4f       	sbci	r25, 0xFF	; 255
 aba:	99 23       	and	r25, r25
 abc:	a9 f0       	breq	.+42     	; 0xae8 <__floatsisf+0x40>
 abe:	f9 2f       	mov	r31, r25
 ac0:	96 e9       	ldi	r25, 0x96	; 150
 ac2:	bb 27       	eor	r27, r27
 ac4:	93 95       	inc	r25
 ac6:	f6 95       	lsr	r31
 ac8:	87 95       	ror	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	b7 95       	ror	r27
 ad0:	f1 11       	cpse	r31, r1
 ad2:	f8 cf       	rjmp	.-16     	; 0xac4 <__floatsisf+0x1c>
 ad4:	fa f4       	brpl	.+62     	; 0xb14 <__floatsisf+0x6c>
 ad6:	bb 0f       	add	r27, r27
 ad8:	11 f4       	brne	.+4      	; 0xade <__floatsisf+0x36>
 ada:	60 ff       	sbrs	r22, 0
 adc:	1b c0       	rjmp	.+54     	; 0xb14 <__floatsisf+0x6c>
 ade:	6f 5f       	subi	r22, 0xFF	; 255
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	16 c0       	rjmp	.+44     	; 0xb14 <__floatsisf+0x6c>
 ae8:	88 23       	and	r24, r24
 aea:	11 f0       	breq	.+4      	; 0xaf0 <__floatsisf+0x48>
 aec:	96 e9       	ldi	r25, 0x96	; 150
 aee:	11 c0       	rjmp	.+34     	; 0xb12 <__floatsisf+0x6a>
 af0:	77 23       	and	r23, r23
 af2:	21 f0       	breq	.+8      	; 0xafc <__floatsisf+0x54>
 af4:	9e e8       	ldi	r25, 0x8E	; 142
 af6:	87 2f       	mov	r24, r23
 af8:	76 2f       	mov	r23, r22
 afa:	05 c0       	rjmp	.+10     	; 0xb06 <__floatsisf+0x5e>
 afc:	66 23       	and	r22, r22
 afe:	71 f0       	breq	.+28     	; 0xb1c <__floatsisf+0x74>
 b00:	96 e8       	ldi	r25, 0x86	; 134
 b02:	86 2f       	mov	r24, r22
 b04:	70 e0       	ldi	r23, 0x00	; 0
 b06:	60 e0       	ldi	r22, 0x00	; 0
 b08:	2a f0       	brmi	.+10     	; 0xb14 <__floatsisf+0x6c>
 b0a:	9a 95       	dec	r25
 b0c:	66 0f       	add	r22, r22
 b0e:	77 1f       	adc	r23, r23
 b10:	88 1f       	adc	r24, r24
 b12:	da f7       	brpl	.-10     	; 0xb0a <__floatsisf+0x62>
 b14:	88 0f       	add	r24, r24
 b16:	96 95       	lsr	r25
 b18:	87 95       	ror	r24
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret

00000b1e <__fp_inf>:
 b1e:	97 f9       	bld	r25, 7
 b20:	9f 67       	ori	r25, 0x7F	; 127
 b22:	80 e8       	ldi	r24, 0x80	; 128
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	60 e0       	ldi	r22, 0x00	; 0
 b28:	08 95       	ret

00000b2a <__fp_mintl>:
 b2a:	88 23       	and	r24, r24
 b2c:	71 f4       	brne	.+28     	; 0xb4a <__fp_mintl+0x20>
 b2e:	77 23       	and	r23, r23
 b30:	21 f0       	breq	.+8      	; 0xb3a <__fp_mintl+0x10>
 b32:	98 50       	subi	r25, 0x08	; 8
 b34:	87 2b       	or	r24, r23
 b36:	76 2f       	mov	r23, r22
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <__fp_mintl+0x1e>
 b3a:	66 23       	and	r22, r22
 b3c:	11 f4       	brne	.+4      	; 0xb42 <__fp_mintl+0x18>
 b3e:	99 27       	eor	r25, r25
 b40:	0d c0       	rjmp	.+26     	; 0xb5c <__fp_mintl+0x32>
 b42:	90 51       	subi	r25, 0x10	; 16
 b44:	86 2b       	or	r24, r22
 b46:	70 e0       	ldi	r23, 0x00	; 0
 b48:	60 e0       	ldi	r22, 0x00	; 0
 b4a:	2a f0       	brmi	.+10     	; 0xb56 <__fp_mintl+0x2c>
 b4c:	9a 95       	dec	r25
 b4e:	66 0f       	add	r22, r22
 b50:	77 1f       	adc	r23, r23
 b52:	88 1f       	adc	r24, r24
 b54:	da f7       	brpl	.-10     	; 0xb4c <__fp_mintl+0x22>
 b56:	88 0f       	add	r24, r24
 b58:	96 95       	lsr	r25
 b5a:	87 95       	ror	r24
 b5c:	97 f9       	bld	r25, 7
 b5e:	08 95       	ret

00000b60 <__fp_mpack>:
 b60:	9f 3f       	cpi	r25, 0xFF	; 255
 b62:	31 f0       	breq	.+12     	; 0xb70 <__fp_mpack_finite+0xc>

00000b64 <__fp_mpack_finite>:
 b64:	91 50       	subi	r25, 0x01	; 1
 b66:	20 f4       	brcc	.+8      	; 0xb70 <__fp_mpack_finite+0xc>
 b68:	87 95       	ror	r24
 b6a:	77 95       	ror	r23
 b6c:	67 95       	ror	r22
 b6e:	b7 95       	ror	r27
 b70:	88 0f       	add	r24, r24
 b72:	91 1d       	adc	r25, r1
 b74:	96 95       	lsr	r25
 b76:	87 95       	ror	r24
 b78:	97 f9       	bld	r25, 7
 b7a:	08 95       	ret

00000b7c <__fp_nan>:
 b7c:	9f ef       	ldi	r25, 0xFF	; 255
 b7e:	80 ec       	ldi	r24, 0xC0	; 192
 b80:	08 95       	ret

00000b82 <__fp_pscA>:
 b82:	00 24       	eor	r0, r0
 b84:	0a 94       	dec	r0
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	09 06       	cpc	r0, r25
 b8e:	08 95       	ret

00000b90 <__fp_pscB>:
 b90:	00 24       	eor	r0, r0
 b92:	0a 94       	dec	r0
 b94:	12 16       	cp	r1, r18
 b96:	13 06       	cpc	r1, r19
 b98:	14 06       	cpc	r1, r20
 b9a:	05 06       	cpc	r0, r21
 b9c:	08 95       	ret

00000b9e <__fp_round>:
 b9e:	09 2e       	mov	r0, r25
 ba0:	03 94       	inc	r0
 ba2:	00 0c       	add	r0, r0
 ba4:	11 f4       	brne	.+4      	; 0xbaa <__fp_round+0xc>
 ba6:	88 23       	and	r24, r24
 ba8:	52 f0       	brmi	.+20     	; 0xbbe <__fp_round+0x20>
 baa:	bb 0f       	add	r27, r27
 bac:	40 f4       	brcc	.+16     	; 0xbbe <__fp_round+0x20>
 bae:	bf 2b       	or	r27, r31
 bb0:	11 f4       	brne	.+4      	; 0xbb6 <__fp_round+0x18>
 bb2:	60 ff       	sbrs	r22, 0
 bb4:	04 c0       	rjmp	.+8      	; 0xbbe <__fp_round+0x20>
 bb6:	6f 5f       	subi	r22, 0xFF	; 255
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255
 bba:	8f 4f       	sbci	r24, 0xFF	; 255
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	08 95       	ret

00000bc0 <__fp_split3>:
 bc0:	57 fd       	sbrc	r21, 7
 bc2:	90 58       	subi	r25, 0x80	; 128
 bc4:	44 0f       	add	r20, r20
 bc6:	55 1f       	adc	r21, r21
 bc8:	59 f0       	breq	.+22     	; 0xbe0 <__fp_splitA+0x10>
 bca:	5f 3f       	cpi	r21, 0xFF	; 255
 bcc:	71 f0       	breq	.+28     	; 0xbea <__fp_splitA+0x1a>
 bce:	47 95       	ror	r20

00000bd0 <__fp_splitA>:
 bd0:	88 0f       	add	r24, r24
 bd2:	97 fb       	bst	r25, 7
 bd4:	99 1f       	adc	r25, r25
 bd6:	61 f0       	breq	.+24     	; 0xbf0 <__fp_splitA+0x20>
 bd8:	9f 3f       	cpi	r25, 0xFF	; 255
 bda:	79 f0       	breq	.+30     	; 0xbfa <__fp_splitA+0x2a>
 bdc:	87 95       	ror	r24
 bde:	08 95       	ret
 be0:	12 16       	cp	r1, r18
 be2:	13 06       	cpc	r1, r19
 be4:	14 06       	cpc	r1, r20
 be6:	55 1f       	adc	r21, r21
 be8:	f2 cf       	rjmp	.-28     	; 0xbce <__fp_split3+0xe>
 bea:	46 95       	lsr	r20
 bec:	f1 df       	rcall	.-30     	; 0xbd0 <__fp_splitA>
 bee:	08 c0       	rjmp	.+16     	; 0xc00 <__fp_splitA+0x30>
 bf0:	16 16       	cp	r1, r22
 bf2:	17 06       	cpc	r1, r23
 bf4:	18 06       	cpc	r1, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	f1 cf       	rjmp	.-30     	; 0xbdc <__fp_splitA+0xc>
 bfa:	86 95       	lsr	r24
 bfc:	71 05       	cpc	r23, r1
 bfe:	61 05       	cpc	r22, r1
 c00:	08 94       	sec
 c02:	08 95       	ret

00000c04 <__fp_trunc>:
 c04:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <__fp_splitA>
 c08:	a0 f0       	brcs	.+40     	; 0xc32 <__fp_trunc+0x2e>
 c0a:	be e7       	ldi	r27, 0x7E	; 126
 c0c:	b9 17       	cp	r27, r25
 c0e:	88 f4       	brcc	.+34     	; 0xc32 <__fp_trunc+0x2e>
 c10:	bb 27       	eor	r27, r27
 c12:	9f 38       	cpi	r25, 0x8F	; 143
 c14:	60 f4       	brcc	.+24     	; 0xc2e <__fp_trunc+0x2a>
 c16:	16 16       	cp	r1, r22
 c18:	b1 1d       	adc	r27, r1
 c1a:	67 2f       	mov	r22, r23
 c1c:	78 2f       	mov	r23, r24
 c1e:	88 27       	eor	r24, r24
 c20:	98 5f       	subi	r25, 0xF8	; 248
 c22:	f7 cf       	rjmp	.-18     	; 0xc12 <__fp_trunc+0xe>
 c24:	86 95       	lsr	r24
 c26:	77 95       	ror	r23
 c28:	67 95       	ror	r22
 c2a:	b1 1d       	adc	r27, r1
 c2c:	93 95       	inc	r25
 c2e:	96 39       	cpi	r25, 0x96	; 150
 c30:	c8 f3       	brcs	.-14     	; 0xc24 <__fp_trunc+0x20>
 c32:	08 95       	ret

00000c34 <__fp_zero>:
 c34:	e8 94       	clt

00000c36 <__fp_szero>:
 c36:	bb 27       	eor	r27, r27
 c38:	66 27       	eor	r22, r22
 c3a:	77 27       	eor	r23, r23
 c3c:	cb 01       	movw	r24, r22
 c3e:	97 f9       	bld	r25, 7
 c40:	08 95       	ret

00000c42 <__mulsf3>:
 c42:	0e 94 34 06 	call	0xc68	; 0xc68 <__mulsf3x>
 c46:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_round>
 c4a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscA>
 c4e:	38 f0       	brcs	.+14     	; 0xc5e <__mulsf3+0x1c>
 c50:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_pscB>
 c54:	20 f0       	brcs	.+8      	; 0xc5e <__mulsf3+0x1c>
 c56:	95 23       	and	r25, r21
 c58:	11 f0       	breq	.+4      	; 0xc5e <__mulsf3+0x1c>
 c5a:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_inf>
 c5e:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_nan>
 c62:	11 24       	eor	r1, r1
 c64:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_szero>

00000c68 <__mulsf3x>:
 c68:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_split3>
 c6c:	70 f3       	brcs	.-36     	; 0xc4a <__mulsf3+0x8>

00000c6e <__mulsf3_pse>:
 c6e:	95 9f       	mul	r25, r21
 c70:	c1 f3       	breq	.-16     	; 0xc62 <__mulsf3+0x20>
 c72:	95 0f       	add	r25, r21
 c74:	50 e0       	ldi	r21, 0x00	; 0
 c76:	55 1f       	adc	r21, r21
 c78:	62 9f       	mul	r22, r18
 c7a:	f0 01       	movw	r30, r0
 c7c:	72 9f       	mul	r23, r18
 c7e:	bb 27       	eor	r27, r27
 c80:	f0 0d       	add	r31, r0
 c82:	b1 1d       	adc	r27, r1
 c84:	63 9f       	mul	r22, r19
 c86:	aa 27       	eor	r26, r26
 c88:	f0 0d       	add	r31, r0
 c8a:	b1 1d       	adc	r27, r1
 c8c:	aa 1f       	adc	r26, r26
 c8e:	64 9f       	mul	r22, r20
 c90:	66 27       	eor	r22, r22
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	66 1f       	adc	r22, r22
 c98:	82 9f       	mul	r24, r18
 c9a:	22 27       	eor	r18, r18
 c9c:	b0 0d       	add	r27, r0
 c9e:	a1 1d       	adc	r26, r1
 ca0:	62 1f       	adc	r22, r18
 ca2:	73 9f       	mul	r23, r19
 ca4:	b0 0d       	add	r27, r0
 ca6:	a1 1d       	adc	r26, r1
 ca8:	62 1f       	adc	r22, r18
 caa:	83 9f       	mul	r24, r19
 cac:	a0 0d       	add	r26, r0
 cae:	61 1d       	adc	r22, r1
 cb0:	22 1f       	adc	r18, r18
 cb2:	74 9f       	mul	r23, r20
 cb4:	33 27       	eor	r19, r19
 cb6:	a0 0d       	add	r26, r0
 cb8:	61 1d       	adc	r22, r1
 cba:	23 1f       	adc	r18, r19
 cbc:	84 9f       	mul	r24, r20
 cbe:	60 0d       	add	r22, r0
 cc0:	21 1d       	adc	r18, r1
 cc2:	82 2f       	mov	r24, r18
 cc4:	76 2f       	mov	r23, r22
 cc6:	6a 2f       	mov	r22, r26
 cc8:	11 24       	eor	r1, r1
 cca:	9f 57       	subi	r25, 0x7F	; 127
 ccc:	50 40       	sbci	r21, 0x00	; 0
 cce:	9a f0       	brmi	.+38     	; 0xcf6 <__mulsf3_pse+0x88>
 cd0:	f1 f0       	breq	.+60     	; 0xd0e <__mulsf3_pse+0xa0>
 cd2:	88 23       	and	r24, r24
 cd4:	4a f0       	brmi	.+18     	; 0xce8 <__mulsf3_pse+0x7a>
 cd6:	ee 0f       	add	r30, r30
 cd8:	ff 1f       	adc	r31, r31
 cda:	bb 1f       	adc	r27, r27
 cdc:	66 1f       	adc	r22, r22
 cde:	77 1f       	adc	r23, r23
 ce0:	88 1f       	adc	r24, r24
 ce2:	91 50       	subi	r25, 0x01	; 1
 ce4:	50 40       	sbci	r21, 0x00	; 0
 ce6:	a9 f7       	brne	.-22     	; 0xcd2 <__mulsf3_pse+0x64>
 ce8:	9e 3f       	cpi	r25, 0xFE	; 254
 cea:	51 05       	cpc	r21, r1
 cec:	80 f0       	brcs	.+32     	; 0xd0e <__mulsf3_pse+0xa0>
 cee:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_inf>
 cf2:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_szero>
 cf6:	5f 3f       	cpi	r21, 0xFF	; 255
 cf8:	e4 f3       	brlt	.-8      	; 0xcf2 <__mulsf3_pse+0x84>
 cfa:	98 3e       	cpi	r25, 0xE8	; 232
 cfc:	d4 f3       	brlt	.-12     	; 0xcf2 <__mulsf3_pse+0x84>
 cfe:	86 95       	lsr	r24
 d00:	77 95       	ror	r23
 d02:	67 95       	ror	r22
 d04:	b7 95       	ror	r27
 d06:	f7 95       	ror	r31
 d08:	e7 95       	ror	r30
 d0a:	9f 5f       	subi	r25, 0xFF	; 255
 d0c:	c1 f7       	brne	.-16     	; 0xcfe <__mulsf3_pse+0x90>
 d0e:	fe 2b       	or	r31, r30
 d10:	88 0f       	add	r24, r24
 d12:	91 1d       	adc	r25, r1
 d14:	96 95       	lsr	r25
 d16:	87 95       	ror	r24
 d18:	97 f9       	bld	r25, 7
 d1a:	08 95       	ret

00000d1c <_exit>:
 d1c:	f8 94       	cli

00000d1e <__stop_program>:
 d1e:	ff cf       	rjmp	.-2      	; 0xd1e <__stop_program>
